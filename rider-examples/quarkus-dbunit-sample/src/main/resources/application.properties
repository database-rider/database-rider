# GLOBAL
isbn.prefix=1234
quarkus.http.auth.form.landing-page=http://localhost:8080
quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/cdbookstoreDB
quarkus.datasource.jdbc.driver = org.postgresql.Driver
quarkus.datasource.jdbc.username = cdbookstoreDB
# unencrypted password is fine for the showcase but don't do it in a real application!
quarkus.datasource.jdbc.password = h2g2
quarkus.datasource.jdbc.max-size=5
quarkus.datasource.jdbc.min-size=5
quarkus.datasource.jdbc.initial-size=5


quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=false

quarkus.log.category."com.github".level=WARN


# DEV
%dev.quarkus.hibernate-orm.log.sql=true
%dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql

%dev.quarkus.log.category."com.github".level=INFO

%dev.isbn.suffix=DEV


# TEST
%test.quarkus.datasource.jdbc.url = jdbc:h2:mem:cdbookstoreDB
%test.quarkus.datasource.jdbc.driver = org.h2.Driver
%test.quarkus.datasource.jdbc.max-size=5
%test.quarkus.datasource.jdbc.min-size=5
%test.quarkus.datasource.jdbc.initial-size=5

#TODO in issue #329 %test.quarkus.datasource.jdbc."secondary".url = jdbc:h2:mem:cdbookstoreSecondaryDB
#TODO in issue #329 %test.quarkus.datasource.jdbc."secondary".driver = org.h2.Driver

%test.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.hibernate-orm.log.sql=true
#no need, we use dbrider for that %test.quarkus.hibernate-orm.sql-load-script = import-test.sql

#TODO in issue #329 %test.quarkus.hibernate-orm."secondary".database.generation=drop-and-create
#TODO in issue #329 %test.quarkus.hibernate-orm."secondary".log.sql=true

%test.quarkus.log.category."com.github".level=DEBUG

%test.isbn.suffix=TEST
